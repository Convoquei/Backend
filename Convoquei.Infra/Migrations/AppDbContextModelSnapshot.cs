// <auto-generated />
using System;
using Convoquei.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Convoquei.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Convoquei.Core.Assinaturas.Entidades.Assinatura", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAlteracao")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_fim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_inicio");

                    b.Property<Guid>("plano_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("plano_id");

                    b.ToTable("assinaturas", (string)null);
                });

            modelBuilder.Entity("Convoquei.Core.Assinaturas.Entidades.Plano", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAlteracao")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("LimiteEventosMensais")
                        .HasColumnType("integer")
                        .HasColumnName("limite_eventos_mensais");

                    b.Property<int>("LimiteMembros")
                        .HasColumnType("integer")
                        .HasColumnName("limite_membros");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("Tipo")
                        .IsUnique()
                        .HasDatabaseName("uk_planos_tipo");

                    b.ToTable("planos", (string)null);
                });

            modelBuilder.Entity("Convoquei.Core.Eventos.Entidades.ArquivoEvento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChaveStorage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("chave_storage");

                    b.Property<DateTime?>("DataAlteracao")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mime_type");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nome");

                    b.Property<long>("TamanhoEmBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("tamanho_em_bytes");

                    b.Property<Guid>("criador_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("evento_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("criador_id");

                    b.HasIndex("evento_id");

                    b.ToTable("arquivos_evento", (string)null);
                });

            modelBuilder.Entity("Convoquei.Core.Eventos.Entidades.Evento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAlteracao")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_hora_inicio");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descricao");

                    b.Property<TimeSpan>("FechamentoEscalaAntecedencia")
                        .HasColumnType("interval")
                        .HasColumnName("fechamento_escala_antecedencia");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("local");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nome");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.Property<Guid>("criador_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("organizacao_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("criador_id");

                    b.HasIndex("organizacao_id");

                    b.ToTable("eventos", (string)null);
                });

            modelBuilder.Entity("Convoquei.Core.Eventos.Entidades.ParticipanteEvento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAlteracao")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("StatusParticipacao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_participacao");

                    b.Property<Guid>("evento_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("usuario_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("evento_id");

                    b.HasIndex("usuario_id");

                    b.ToTable("participantes_evento", (string)null);
                });

            modelBuilder.Entity("Convoquei.Core.Organizacoes.Entidades.ConviteOrganizacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAlteracao")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_expiracao");

                    b.Property<Guid>("convidador_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("organizacao_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("convidador_id");

                    b.HasIndex("organizacao_id");

                    b.ToTable("convites_organizacao", (string)null);
                });

            modelBuilder.Entity("Convoquei.Core.Organizacoes.Entidades.MembroOrganizacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cargo");

                    b.Property<DateTime?>("DataAlteracao")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("organizacao_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("organizacao_id");

                    b.ToTable("membros_organizacao", (string)null);
                });

            modelBuilder.Entity("Convoquei.Core.Organizacoes.Entidades.Organizacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAlteracao")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("ExigirAprovacaoDisponibilidade")
                        .HasColumnType("boolean")
                        .HasColumnName("exigir_aprovacao_disponibilidade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("organizacoes", (string)null);
                });

            modelBuilder.Entity("Convoquei.Core.Usuarios.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAlteracao")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("senha");

                    b.HasKey("Id");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Convoquei.Core.Assinaturas.Entidades.Assinatura", b =>
                {
                    b.HasOne("Convoquei.Core.Organizacoes.Entidades.Organizacao", "Organizacao")
                        .WithOne("Assinatura")
                        .HasForeignKey("Convoquei.Core.Assinaturas.Entidades.Assinatura", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Convoquei.Core.Assinaturas.Entidades.Plano", "Plano")
                        .WithMany("Assinaturas")
                        .HasForeignKey("plano_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizacao");

                    b.Navigation("Plano");
                });

            modelBuilder.Entity("Convoquei.Core.Eventos.Entidades.ArquivoEvento", b =>
                {
                    b.HasOne("Convoquei.Core.Usuarios.Entidades.Usuario", "Criador")
                        .WithMany()
                        .HasForeignKey("criador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Convoquei.Core.Eventos.Entidades.Evento", "Evento")
                        .WithMany("Arquivos")
                        .HasForeignKey("evento_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criador");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("Convoquei.Core.Eventos.Entidades.Evento", b =>
                {
                    b.HasOne("Convoquei.Core.Usuarios.Entidades.Usuario", "Criador")
                        .WithMany()
                        .HasForeignKey("criador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Convoquei.Core.Organizacoes.Entidades.Organizacao", "Organizacao")
                        .WithMany("Eventos")
                        .HasForeignKey("organizacao_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Convoquei.Core.Eventos.ValueObjects.DadosCancelamentoEvento", "Cancelamento", b1 =>
                        {
                            b1.Property<Guid>("EventoId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Data")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("data_cancelamento");

                            b1.Property<string>("Motivo")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("motivo_cancelamento");

                            b1.Property<Guid>("usuario_cancelamento_id")
                                .HasColumnType("uuid");

                            b1.HasKey("EventoId");

                            b1.HasIndex("usuario_cancelamento_id");

                            b1.ToTable("eventos");

                            b1.WithOwner()
                                .HasForeignKey("EventoId");

                            b1.HasOne("Convoquei.Core.Usuarios.Entidades.Usuario", "Usuario")
                                .WithMany()
                                .HasForeignKey("usuario_cancelamento_id")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_usuario_cancelamento");

                            b1.Navigation("Usuario");
                        });

                    b.Navigation("Cancelamento");

                    b.Navigation("Criador");

                    b.Navigation("Organizacao");
                });

            modelBuilder.Entity("Convoquei.Core.Eventos.Entidades.ParticipanteEvento", b =>
                {
                    b.HasOne("Convoquei.Core.Eventos.Entidades.Evento", "Evento")
                        .WithMany("Participantes")
                        .HasForeignKey("evento_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Convoquei.Core.Usuarios.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Convoquei.Core.Organizacoes.Entidades.ConviteOrganizacao", b =>
                {
                    b.HasOne("Convoquei.Core.Usuarios.Entidades.Usuario", "Convidador")
                        .WithMany()
                        .HasForeignKey("convidador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Convoquei.Core.Organizacoes.Entidades.Organizacao", "Organizacao")
                        .WithMany("Convites")
                        .HasForeignKey("organizacao_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Convoquei.Core.Usuarios.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ConviteOrganizacaoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("email");

                            b1.HasKey("ConviteOrganizacaoId");

                            b1.ToTable("convites_organizacao");

                            b1.WithOwner()
                                .HasForeignKey("ConviteOrganizacaoId");
                        });

                    b.Navigation("Convidador");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Organizacao");
                });

            modelBuilder.Entity("Convoquei.Core.Organizacoes.Entidades.MembroOrganizacao", b =>
                {
                    b.HasOne("Convoquei.Core.Usuarios.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Convoquei.Core.Organizacoes.Entidades.Organizacao", "Organizacao")
                        .WithMany("Membros")
                        .HasForeignKey("organizacao_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizacao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Convoquei.Core.Usuarios.Entidades.Usuario", b =>
                {
                    b.OwnsOne("Convoquei.Core.Usuarios.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("email");

                            b1.HasKey("UsuarioId");

                            b1.HasIndex("Endereco")
                                .IsUnique();

                            b1.ToTable("usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("Convoquei.Core.Usuarios.ValueObjects.Token", "Token", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Acesso")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("token_acesso");

                            b1.Property<string>("Refresh")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("token_refresh");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Convoquei.Core.Assinaturas.Entidades.Plano", b =>
                {
                    b.Navigation("Assinaturas");
                });

            modelBuilder.Entity("Convoquei.Core.Eventos.Entidades.Evento", b =>
                {
                    b.Navigation("Arquivos");

                    b.Navigation("Participantes");
                });

            modelBuilder.Entity("Convoquei.Core.Organizacoes.Entidades.Organizacao", b =>
                {
                    b.Navigation("Assinatura")
                        .IsRequired();

                    b.Navigation("Convites");

                    b.Navigation("Eventos");

                    b.Navigation("Membros");
                });
#pragma warning restore 612, 618
        }
    }
}
